


ARM Macro Assembler    Page 1 


    1 00000000         ; <<< Use Configuration Wizard in Context Menu >>>
    2 00000000         ;*******************************************************
                       ***********************
    3 00000000         ;
    4 00000000         ; startup_rvmdk.S - Startup code for use with Keil's uVi
                       sion.
    5 00000000         ;
    6 00000000         ; Copyright (c) 2005-2011 Texas Instruments Incorporated
                       .  All rights reserved.
    7 00000000         ; Software License Agreement
    8 00000000         ; 
    9 00000000         ; Texas Instruments (TI) is supplying this software for 
                       use solely and
   10 00000000         ; exclusively on TI's microcontroller products. The soft
                       ware is owned by
   11 00000000         ; TI and/or its suppliers, and is protected under applic
                       able copyright
   12 00000000         ; laws. You may not combine this software with "viral" o
                       pen-source
   13 00000000         ; software in order to form a larger program.
   14 00000000         ; 
   15 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
                       
   16 00000000         ; NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, 
                       INCLUDING, BUT
   17 00000000         ; NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY 
                       AND FITNESS FOR
   18 00000000         ; A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL 
                       NOT, UNDER ANY
   19 00000000         ; CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR C
                       ONSEQUENTIAL
   20 00000000         ; DAMAGES, FOR ANY REASON WHATSOEVER.
   21 00000000         ; 
   22 00000000         ; This is part of revision 8264 of the EK-LM3S1968 Firmw
                       are Package.
   23 00000000         ;
   24 00000000         ;*******************************************************
                       ***********************
   25 00000000         
   26 00000000         ;*******************************************************
                       ***********************
   27 00000000         ;
   28 00000000         ; <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
   29 00000000         ;
   30 00000000         ;*******************************************************
                       ***********************
   31 00000000 00001000 
                       Stack   EQU              0x00001000
   32 00000000         
   33 00000000         ;*******************************************************
                       ***********************
   34 00000000         ;
   35 00000000         ; <o> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
   36 00000000         ;
   37 00000000         ;*******************************************************
                       ***********************
   38 00000000 00001000 
                       Heap    EQU              0x00001000
   39 00000000         



ARM Macro Assembler    Page 2 


   40 00000000         ;*******************************************************
                       ***********************
   41 00000000         ;
   42 00000000         ; Allocate space for the stack.
   43 00000000         ;
   44 00000000         ;*******************************************************
                       ***********************
   45 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   46 00000000         StackMem
   47 00000000                 SPACE            Stack
   48 00001000         __initial_sp
   49 00001000         
   50 00001000         ;*******************************************************
                       ***********************
   51 00001000         ;
   52 00001000         ; Allocate space for the heap.
   53 00001000         ;
   54 00001000         ;*******************************************************
                       ***********************
   55 00001000                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3
   56 00000000         __heap_base
   57 00000000         HeapMem
   58 00000000                 SPACE            Heap
   59 00001000         __heap_limit
   60 00001000         
   61 00001000         ;*******************************************************
                       ***********************
   62 00001000         ;
   63 00001000         ; Indicate that the code in this file preserves 8-byte a
                       lignment of the stack.
   64 00001000         ;
   65 00001000         ;*******************************************************
                       ***********************
   66 00001000                 PRESERVE8
   67 00001000         
   68 00001000         ;*******************************************************
                       ***********************
   69 00001000         ;
   70 00001000         ; Place code into the reset code section.
   71 00001000         ;
   72 00001000         ;*******************************************************
                       ***********************
   73 00001000                 AREA             RESET, CODE, READONLY
   74 00000000                 THUMB
   75 00000000         
   76 00000000         ;*******************************************************
                       ***********************
   77 00000000         ;
   78 00000000         ; External declaration for the interrupt handler used by
                        the application.
   79 00000000         ;
   80 00000000         ;*******************************************************
                       ***********************
   81 00000000                 EXTERN           UARTIntHandler
   82 00000000                 EXTERN           SYSTICKIntHandler
   83 00000000                 EXTERN           Timer0Handler
   84 00000000                 EXTERN           Timer1Handler



ARM Macro Assembler    Page 3 


   85 00000000         
   86 00000000         ;*******************************************************
                       ***********************
   87 00000000         ;
   88 00000000         ; The vector table.
   89 00000000         ;
   90 00000000         ;*******************************************************
                       ***********************
   91 00000000                 EXPORT           __Vectors
   92 00000000         __Vectors
   93 00000000 00001000        DCD              StackMem + Stack 
                                                            ; Top of Stack    0
                                                            
   94 00000004 00000000        DCD              Reset_Handler ; Reset Handler  
                                                              1
   95 00000008 00000000        DCD              NmiSR       ; NMI Handler    2
   96 0000000C 00000000        DCD              FaultISR    ; Hard Fault Handle
                                                            r  3 
   97 00000010 00000000        DCD              IntDefaultHandler ; The MPU fau
                                                            lt handler  4
   98 00000014 00000000        DCD              IntDefaultHandler ; The bus fau
                                                            lt handler  5
   99 00000018 00000000        DCD              IntDefaultHandler ; The usage f
                                                            ault handler 6
  100 0000001C 00000000        DCD              0           ; Reserved     7
  101 00000020 00000000        DCD              0           ; Reserved     8
  102 00000024 00000000        DCD              0           ; Reserved     9
  103 00000028 00000000        DCD              0           ; Reserved     10
  104 0000002C 00000000        DCD              IntDefaultHandler ; SVCall hand
                                                            ler   11
  105 00000030 00000000        DCD              IntDefaultHandler ; Debug monit
                                                            or handler  12
  106 00000034 00000000        DCD              0           ; Reserved     13
  107 00000038 00000000        DCD              IntDefaultHandler ; The PendSV 
                                                            handler  14
  108 0000003C 00000000        DCD              SYSTICKIntHandler ; The SysTick
                                                             handler  15
  109 00000040 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port A    16
                                                            
  110 00000044 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port B    17
                                                            
  111 00000048 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port C    18
                                                            
  112 0000004C 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port D    19
                                                            
  113 00000050 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port E    20
                                                            
  114 00000054 00000000        DCD              IntDefaultHandler ; UART0 Rx an
                                                            d Tx  21
  115 00000058 00000000        DCD              IntDefaultHandler ; UART1 Rx an
                                                            d Tx   22 
  116 0000005C 00000000        DCD              IntDefaultHandler ; SSI0 Rx and
                                                             Tx   23  
  117 00000060 00000000        DCD              IntDefaultHandler ; I2C0 Master



ARM Macro Assembler    Page 4 


                                                             and Slave  24
  118 00000064 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Fault     25
  119 00000068 00000000        DCD              IntDefaultHandler ; PWM Generat
                                                            or 0   26
  120 0000006C 00000000        DCD              IntDefaultHandler ; PWM Generat
                                                            or 1   27
  121 00000070 00000000        DCD              IntDefaultHandler ; PWM Generat
                                                            or 2   28
  122 00000074 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder 0  29
  123 00000078 00000000        DCD              IntDefaultHandler ; ADC Sequenc
                                                            e 0   30
  124 0000007C 00000000        DCD              IntDefaultHandler ; ADC Sequenc
                                                            e 1   31
  125 00000080 00000000        DCD              IntDefaultHandler ; ADC Sequenc
                                                            e 2   32 
  126 00000084 00000000        DCD              IntDefaultHandler ; ADC Sequenc
                                                            e 3   33
  127 00000088 00000000        DCD              IntDefaultHandler ; Watchdog ti
                                                            mer   34
  128 0000008C 00000000        DCD              Timer0Handler ; Timer 0 subtime
                                                            r A  35
  129 00000090 00000000        DCD              Timer0Handler ; Timer 0 subtime
                                                            r B  36
  130 00000094 00000000        DCD              Timer1Handler ; Timer 1 subtime
                                                            r A  37
  131 00000098 00000000        DCD              IntDefaultHandler ; Timer 1 sub
                                                            timer B  38
  132 0000009C 00000000        DCD              IntDefaultHandler ; Timer 2 sub
                                                            timer A  39
  133 000000A0 00000000        DCD              IntDefaultHandler ; Timer 2 sub
                                                            timer B  40
  134 000000A4 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 0  41
  135 000000A8 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 1  42 
  136 000000AC 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 2  43
  137 000000B0 00000000        DCD              IntDefaultHandler ; System Cont
                                                            rol (PLL, OSC, BO) 
                                                            44
  138 000000B4 00000000        DCD              IntDefaultHandler ; FLASH Contr
                                                            ol    45
  139 000000B8 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port F    46
                                                            
  140 000000BC 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port G    47
                                                            
  141 000000C0 00000000        DCD              IntDefaultHandler 
                                                            ; GPIO Port H    48
                                                            
  142 000000C4 00000000        DCD              IntDefaultHandler ; UART2 Rx an
                                                            d Tx   49
  143 000000C8 00000000        DCD              IntDefaultHandler ; SSI1 Rx and
                                                             Tx   50
  144 000000CC 00000000        DCD              IntDefaultHandler ; Timer 3 sub
                                                            timer A  51



ARM Macro Assembler    Page 5 


  145 000000D0 00000000        DCD              IntDefaultHandler ; Timer 3 sub
                                                            timer B  52
  146 000000D4 00000000        DCD              IntDefaultHandler ; I2C1 Master
                                                             and Slave  53
  147 000000D8 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder 1  54
  148 000000DC 00000000        DCD              IntDefaultHandler 
                                                            ; CAN0      55
  149 000000E0 00000000        DCD              IntDefaultHandler 
                                                            ; CAN1      56
  150 000000E4 00000000        DCD              IntDefaultHandler 
                                                            ; CAN2      57
  151 000000E8 00000000        DCD              IntDefaultHandler 
                                                            ; Ethernet     58
  152 000000EC 00000000        DCD              IntDefaultHandler 
                                                            ; Hibernate     59
  153 000000F0         
  154 000000F0         ;*******************************************************
                       ***********************
  155 000000F0         ;
  156 000000F0         ; This is the code that gets called when the processor f
                       irst starts execution
  157 000000F0         ; following a reset event.
  158 000000F0         ;
  159 000000F0         ;*******************************************************
                       ***********************
  160 000000F0                 EXPORT           Reset_Handler
  161 000000F0         Reset_Handler
  162 000000F0         ;
  163 000000F0         ; Call the C library enty point that handles startup.  T
                       his will copy
  164 000000F0         ; the .data section initializers from flash to SRAM and 
                       zero fill the
  165 000000F0         ; .bss section.
  166 000000F0         ;
  167 000000F0                 IMPORT           __main
  168 000000F0 F7FF BFFE       B                __main
  169 000000F4         
  170 000000F4         ;*******************************************************
                       ***********************
  171 000000F4         ;
  172 000000F4         ; This is the code that gets called when the processor r
                       eceives a NMI.  This
  173 000000F4         ; simply enters an infinite loop, preserving the system 
                       state for examination
  174 000000F4         ; by a debugger.
  175 000000F4         ;
  176 000000F4         ;*******************************************************
                       ***********************
  177 000000F4         NmiSR
  178 000000F4 E7FE            B                NmiSR
  179 000000F6         
  180 000000F6         ;*******************************************************
                       ***********************
  181 000000F6         ;
  182 000000F6         ; This is the code that gets called when the processor r
                       eceives a fault
  183 000000F6         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state



ARM Macro Assembler    Page 6 


  184 000000F6         ; for examination by a debugger.
  185 000000F6         ;
  186 000000F6         ;*******************************************************
                       ***********************
  187 000000F6         FaultISR
  188 000000F6 E7FE            B                FaultISR
  189 000000F8         
  190 000000F8         ;*******************************************************
                       ***********************
  191 000000F8         ;
  192 000000F8         ; This is the code that gets called when the processor r
                       eceives an unexpected
  193 000000F8         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state
  194 000000F8         ; for examination by a debugger.
  195 000000F8         ;
  196 000000F8         ;*******************************************************
                       ***********************
  197 000000F8         IntDefaultHandler
  198 000000F8 E7FE            B                IntDefaultHandler
  199 000000FA         
  200 000000FA         ;*******************************************************
                       ***********************
  201 000000FA         ;
  202 000000FA         ; Make sure the end of this section is aligned.
  203 000000FA         ;
  204 000000FA         ;*******************************************************
                       ***********************
  205 000000FA 00 00           ALIGN
  206 000000FC         
  207 000000FC         ;*******************************************************
                       ***********************
  208 000000FC         ;
  209 000000FC         ; Some code in the normal code section for initializing 
                       the heap and stack.
  210 000000FC         ;
  211 000000FC         ;*******************************************************
                       ***********************
  212 000000FC                 AREA             |.text|, CODE, READONLY
  213 00000000         
  214 00000000         
  215 00000000         ;*******************************************************
                       ***********************
  216 00000000         ;
  217 00000000         ; Useful functions.
  218 00000000         ;
  219 00000000         ;*******************************************************
                       ***********************
  220 00000000                 EXPORT           DisableInterrupts
  221 00000000                 EXPORT           EnableInterrupts
  222 00000000                 EXPORT           StartCritical
  223 00000000                 EXPORT           EndCritical
  224 00000000                 EXPORT           WaitForInterrupt
  225 00000000         
  226 00000000         ;*********** DisableInterrupts ***************
  227 00000000         ; disable interrupts
  228 00000000         ; inputs:  none
  229 00000000         ; outputs: none
  230 00000000         DisableInterrupts



ARM Macro Assembler    Page 7 


  231 00000000 B672            CPSID            I
  232 00000002 4770            BX               LR
  233 00000004         
  234 00000004         ;*********** EnableInterrupts ***************
  235 00000004         ; disable interrupts
  236 00000004         ; inputs:  none
  237 00000004         ; outputs: none
  238 00000004         EnableInterrupts
  239 00000004 B662            CPSIE            I
  240 00000006 4770            BX               LR
  241 00000008         
  242 00000008         ;*********** StartCritical ************************
  243 00000008         ; make a copy of previous I bit, disable interrupts
  244 00000008         ; inputs:  none
  245 00000008         ; outputs: previous I bit
  246 00000008         StartCritical
  247 00000008 F3EF 8010       MRS              R0, PRIMASK ; save old status
  248 0000000C B672            CPSID            I           ; mask all (except 
                                                            faults)
  249 0000000E 4770            BX               LR
  250 00000010         
  251 00000010         ;*********** EndCritical ************************
  252 00000010         ; using the copy of previous I bit, restore I bit to pre
                       vious value
  253 00000010         ; inputs:  previous I bit
  254 00000010         ; outputs: none
  255 00000010         EndCritical
  256 00000010 F380 8810       MSR              PRIMASK, R0
  257 00000014 4770            BX               LR
  258 00000016         
  259 00000016         ;*********** WaitForInterrupt ************************
  260 00000016         ; go to low power mode while waiting for the next interr
                       upt
  261 00000016         ; inputs:  none
  262 00000016         ; outputs: none
  263 00000016         WaitForInterrupt
  264 00000016 BF30            WFI
  265 00000018 4770            BX               LR
  266 0000001A         
  267 0000001A         
  268 0000001A         ;*******************************************************
                       ***********************
  269 0000001A         ;
  270 0000001A         ; The function expected of the C library startup code fo
                       r defining the stack
  271 0000001A         ; and heap memory locations.  For the C library version 
                       of the startup code,
  272 0000001A         ; provide this function so that the C library initializa
                       tion code can find out
  273 0000001A         ; the location of the stack and heap.
  274 0000001A         ;
  275 0000001A         ;*******************************************************
                       ***********************
  276 0000001A                 IF               :DEF: __MICROLIB
  277 0000001A                 EXPORT           __initial_sp
  278 0000001A                 EXPORT           __heap_base
  279 0000001A                 EXPORT           __heap_limit
  280 0000001A                 ELSE
  289                          ENDIF



ARM Macro Assembler    Page 8 


  290 0000001A         
  291 0000001A         ;*******************************************************
                       ***********************
  292 0000001A         ;
  293 0000001A         ; Make sure the end of this section is aligned.
  294 0000001A         ;
  295 0000001A         ;*******************************************************
                       ***********************
  296 0000001A 00 00           ALIGN
  297 0000001C         
  298 0000001C         ;*******************************************************
                       ***********************
  299 0000001C         ;
  300 0000001C         ; Tell the assembler that we're done.
  301 0000001C         ;
  302 0000001C         ;*******************************************************
                       ***********************
  303 0000001C                 END
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=Start
up.d -oStartup.o -IQ:\uVision4.5\ARM\RV31\Inc -IQ:\uVision4.5\ARM\CMSIS\Include
 -IQ:\uVision4.5\ARM\Inc\Luminary --predefine="__EVAL SETA 1" --predefine="__MI
CROLIB SETA 1" --list=Startup.lst Startup.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 45 in file Startup.s
   Uses
      None
Comment: STACK unused
StackMem 00000000

Symbol: StackMem
   Definitions
      At line 46 in file Startup.s
   Uses
      At line 93 in file Startup.s
Comment: StackMem used once
__initial_sp 00001000

Symbol: __initial_sp
   Definitions
      At line 48 in file Startup.s
   Uses
      At line 277 in file Startup.s
Comment: __initial_sp used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 55 in file Startup.s
   Uses
      None
Comment: HEAP unused
HeapMem 00000000

Symbol: HeapMem
   Definitions
      At line 57 in file Startup.s
   Uses
      None
Comment: HeapMem unused
__heap_base 00000000

Symbol: __heap_base
   Definitions
      At line 56 in file Startup.s
   Uses
      At line 278 in file Startup.s
Comment: __heap_base used once
__heap_limit 00001000

Symbol: __heap_limit
   Definitions
      At line 59 in file Startup.s
   Uses
      At line 279 in file Startup.s
Comment: __heap_limit used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FaultISR 000000F6

Symbol: FaultISR
   Definitions
      At line 187 in file Startup.s
   Uses
      At line 96 in file Startup.s
      At line 188 in file Startup.s

IntDefaultHandler 000000F8

Symbol: IntDefaultHandler
   Definitions
      At line 197 in file Startup.s
   Uses
      At line 97 in file Startup.s
      At line 98 in file Startup.s
      At line 99 in file Startup.s
      At line 104 in file Startup.s
      At line 105 in file Startup.s
      At line 107 in file Startup.s
      At line 109 in file Startup.s
      At line 110 in file Startup.s
      At line 111 in file Startup.s
      At line 112 in file Startup.s
      At line 113 in file Startup.s
      At line 114 in file Startup.s
      At line 115 in file Startup.s
      At line 116 in file Startup.s
      At line 117 in file Startup.s
      At line 118 in file Startup.s
      At line 119 in file Startup.s
      At line 120 in file Startup.s
      At line 121 in file Startup.s
      At line 122 in file Startup.s
      At line 123 in file Startup.s
      At line 124 in file Startup.s
      At line 125 in file Startup.s
      At line 126 in file Startup.s
      At line 127 in file Startup.s
      At line 131 in file Startup.s
      At line 132 in file Startup.s
      At line 133 in file Startup.s
      At line 134 in file Startup.s
      At line 135 in file Startup.s
      At line 136 in file Startup.s
      At line 137 in file Startup.s
      At line 138 in file Startup.s
      At line 139 in file Startup.s
      At line 140 in file Startup.s
      At line 141 in file Startup.s
      At line 142 in file Startup.s
      At line 143 in file Startup.s
      At line 144 in file Startup.s
      At line 145 in file Startup.s
      At line 146 in file Startup.s
      At line 147 in file Startup.s
      At line 148 in file Startup.s
      At line 149 in file Startup.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 150 in file Startup.s
      At line 151 in file Startup.s
      At line 152 in file Startup.s
      At line 198 in file Startup.s

NmiSR 000000F4

Symbol: NmiSR
   Definitions
      At line 177 in file Startup.s
   Uses
      At line 95 in file Startup.s
      At line 178 in file Startup.s

RESET 00000000

Symbol: RESET
   Definitions
      At line 73 in file Startup.s
   Uses
      None
Comment: RESET unused
Reset_Handler 000000F0

Symbol: Reset_Handler
   Definitions
      At line 161 in file Startup.s
   Uses
      At line 94 in file Startup.s
      At line 160 in file Startup.s

__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 92 in file Startup.s
   Uses
      At line 91 in file Startup.s
Comment: __Vectors used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 212 in file Startup.s
   Uses
      None
Comment: .text unused
DisableInterrupts 00000000

Symbol: DisableInterrupts
   Definitions
      At line 230 in file Startup.s
   Uses
      At line 220 in file Startup.s
Comment: DisableInterrupts used once
EnableInterrupts 00000004

Symbol: EnableInterrupts
   Definitions
      At line 238 in file Startup.s
   Uses
      At line 221 in file Startup.s
Comment: EnableInterrupts used once
EndCritical 00000010

Symbol: EndCritical
   Definitions
      At line 255 in file Startup.s
   Uses
      At line 223 in file Startup.s
Comment: EndCritical used once
StartCritical 00000008

Symbol: StartCritical
   Definitions
      At line 246 in file Startup.s
   Uses
      At line 222 in file Startup.s
Comment: StartCritical used once
WaitForInterrupt 00000016

Symbol: WaitForInterrupt
   Definitions
      At line 263 in file Startup.s
   Uses
      At line 224 in file Startup.s
Comment: WaitForInterrupt used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Heap 00001000

Symbol: Heap
   Definitions
      At line 38 in file Startup.s
   Uses
      At line 58 in file Startup.s
Comment: Heap used once
Stack 00001000

Symbol: Stack
   Definitions
      At line 31 in file Startup.s
   Uses
      At line 47 in file Startup.s
      At line 93 in file Startup.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SYSTICKIntHandler 00000000

Symbol: SYSTICKIntHandler
   Definitions
      At line 82 in file Startup.s
   Uses
      At line 108 in file Startup.s
Comment: SYSTICKIntHandler used once
Timer0Handler 00000000

Symbol: Timer0Handler
   Definitions
      At line 83 in file Startup.s
   Uses
      At line 128 in file Startup.s
      At line 129 in file Startup.s

Timer1Handler 00000000

Symbol: Timer1Handler
   Definitions
      At line 84 in file Startup.s
   Uses
      At line 130 in file Startup.s
Comment: Timer1Handler used once
UARTIntHandler 00000000

Symbol: UARTIntHandler
   Definitions
      At line 81 in file Startup.s
   Uses
      None
Comment: UARTIntHandler unused
__main 00000000

Symbol: __main
   Definitions
      At line 167 in file Startup.s
   Uses
      At line 168 in file Startup.s
Comment: __main used once
5 symbols
359 symbols in table
